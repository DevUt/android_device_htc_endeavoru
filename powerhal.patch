From 03dbc14f209214fbd134f604f4b4ce49e27a10a8 Mon Sep 17 00:00:00 2001
From: alfsamsung <alfsamsung@hotmail.com>
Date: Thu, 18 Feb 2016 14:39:28 +0100
Subject: [PATCH] power: Add powerHAL

Based on asus flo powerHAL.

Change-Id: Ibcd9a1e88cc22e2fe65d7f37e68a4f5fa374b2a5
---
 init.x3.rc             |  33 ++++---
 p880.mk                |   7 +-
 power/Android.mk       |  25 +++++
 power/power.h          |  99 ++++++++++++++++++++
 power/power_p880.c     | 250 +++++++++++++++++++++++++++++++++++++++++++++++++
 prebuilt/89input_boost |  12 ---
 6 files changed, 392 insertions(+), 34 deletions(-)
 create mode 100644 power/Android.mk
 create mode 100644 power/power.h
 create mode 100644 power/power_p880.c
 delete mode 100755 prebuilt/89input_boost

diff --git a/init.x3.rc b/init.x3.rc
index 147c344..093423a 100644
--- a/init.x3.rc
+++ b/init.x3.rc
@@ -137,13 +137,20 @@ on boot
     chown system radio /sys/class/power_supply/fuelgauge/device/state
     chown system radio /sys/class/power_supply/charger/device/chgcc_ta
 
-    # power
+    # power & powerHAL permissions
     chown system system /sys/kernel/tegra_cap/core_cap_level
     chown system system /sys/kernel/tegra_cap/core_cap_state
     chown system system /sys/module/cpu_tegra/parameters/cpu_user_cap
     chown system system /sys/module/cpu_tegra/parameters/force_disable_edp
     chown system system /sys/module/cpu_tegra/parameters/force_policy_max
     chown system system /sys/module/cpu_tegra/parameters/is_enable_boost_load_shaper
+    chown system system /sys/devices/system/cpu/cpuquiet/balanced/core_bias
+    chown system system /sys/devices/system/cpu/cpuquiet/balanced/balance_level
+    chown system system /sys/devices/system/cpu/cpuquiet/balanced/down_delay
+    chown system system /sys/devices/system/cpu/cpuquiet/balanced/up_delay
+    chown system system /sys/module/input_cfboost/parameters/boost_freq
+    chown system system /sys/module/input_cfboost/parameters/boost_time
+    chown system system /sys/devices/platform/tegra-i2c.1/i2c-1/1-0036/lm3533_bl_hvled
 
     # sangwon.jeon for gyro and accel.
     chmod 0666 dev/mpu
@@ -368,23 +375,25 @@ on property:init.svc.bootanim=stopped
     write /sys/devices/system/cpu/cpu1/cpufreq/scaling_governor interactive
     write /sys/devices/system/cpu/cpu2/cpufreq/scaling_governor interactive
     write /sys/devices/system/cpu/cpu3/cpufreq/scaling_governor interactive
-    chown system system /sys/devices/system/cpu/cpufreq/interactive/cores_states
-    chmod 0644 /sys/devices/system/cpu/cpufreq/interactive/cores_states
     write /sys/module/cpu_tegra/parameters/force_policy_max Y
     write /sys/module/cpuidle/parameters/lp2_in_idle 1
 
+    # Interactive powerHAL permissions
+    chown system system /sys/devices/system/cpu/cpufreq/interactive/go_maxspeed_load
+    chown system system /sys/devices/system/cpu/cpufreq/interactive/timer_rate
+    chown system system /sys/devices/system/cpu/cpufreq/interactive/io_is_busy
+    chown system system /sys/devices/system/cpu/cpufreq/interactive/min_sample_time
+    chown system system /sys/devices/system/cpu/cpufreq/interactive/cores_states
+    chmod 0644 /sys/devices/system/cpu/cpufreq/interactive/cores_states
+
     # Allow Overclock via scaling_max_freq
     write /sys/module/cpu_tegra/parameters/cpu_user_cap 1700000
     write /sys/devices/system/cpu/cpu0/cpufreq/scaling_max_freq 1500000
 
     # Interactive dynamic frequecy mode settings
-    write /sys/devices/system/cpu/cpufreq/interactive/io_is_busy 1
     write /sys/devices/system/cpu/cpufreq/interactive/boost_factor 2
     write /sys/devices/system/cpu/cpufreq/interactive/sustain_load 85
-    write /sys/devices/system/cpu/cpufreq/interactive/go_maxspeed_load 98
     write /sys/devices/system/cpu/cpufreq/interactive/dynamic_freq_mode 1
-    write /sys/devices/system/cpu/cpufreq/interactive/min_sample_time 30000
-    write /sys/devices/system/cpu/cpufreq/interactive/timer_rate 40000
 
 on property:dev.bootcomplete=1
     write /sys/devices/platform/tegra-i2c.0/i2c-0/0-0039/run_calibration 1
@@ -392,13 +401,3 @@ on property:dev.bootcomplete=1
 
     # Start cpuquiet
     write /sys/kernel/debug/tegra_hotplug/min_cpus 0
-
-# Performance Profiles
-    ## 0-3, 0=default and lowest threads, 3=running threads disabled.
-    write /sys/devices/system/cpu/cpuquiet/balanced/core_bias 1
-    ## 75=default. Cpu usage in %
-    write /sys/devices/system/cpu/cpuquiet/balanced/balance_level 80
-    ## 1000=default Time delay before turning off cpu. Value in msec 
-    write /sys/devices/system/cpu/cpuquiet/balanced/down_delay 500
-    ## Backlight hvled 0-2, 0=maks
-#    write /sys/devices/platform/tegra-i2c.1/i2c-1/1-0036/lm3533_bl_hvled 2
diff --git a/p880.mk b/p880.mk
index 56464c8..fa92cd2 100644
--- a/p880.mk
+++ b/p880.mk
@@ -20,10 +20,6 @@ PRODUCT_PROPERTY_OVERRIDES += \
 
 PRODUCT_BUILD_PROP_OVERRIDES += BUILD_UTC_DATE=0
 
-## Input-boost
-PRODUCT_COPY_FILES += \
-    $(LOCAL_PATH)/prebuilt/89input_boost:system/etc/init.d/89input_boost
-
 ## Recovery
 PRODUCT_COPY_FILES += \
     $(LOCAL_PATH)/prebuilt/postrecoveryboot.sh:recovery/root/sbin/postrecoveryboot.sh \
@@ -132,7 +128,8 @@ PRODUCT_PACKAGES += libstlport
 # P880 device libs
 PRODUCT_PACKAGES += \
     lights.x3 \
-    libstagefrighthw
+    libstagefrighthw \
+    power.tegra
 
 #Audio and misc
 PRODUCT_PACKAGES += \
diff --git a/power/Android.mk b/power/Android.mk
new file mode 100644
index 0000000..4983fc0
--- /dev/null
+++ b/power/Android.mk
@@ -0,0 +1,25 @@
+#
+# Copyright (C) 2015 The Android Open Source Project
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#      http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+#
+
+LOCAL_PATH:= $(call my-dir)
+
+include $(CLEAR_VARS)
+LOCAL_MODULE_RELATIVE_PATH := hw
+LOCAL_SRC_FILES := power_p880.c
+LOCAL_SHARED_LIBRARIES := liblog libcutils
+LOCAL_MODULE_TAGS := optional
+LOCAL_MODULE := power.$(TARGET_BOARD_PLATFORM)
+include $(BUILD_SHARED_LIBRARY)
diff --git a/power/power.h b/power/power.h
new file mode 100644
index 0000000..dec0c06
--- /dev/null
+++ b/power/power.h
@@ -0,0 +1,99 @@
+/* 
+ * Copyright (C) 2015 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+enum {
+    PROFILE_POWER_SAVE = 0,
+    PROFILE_BALANCED,
+    PROFILE_HIGH_PERFORMANCE,
+    PROFILE_BIAS_POWER_SAVE,
+    PROFILE_MAX
+};
+
+typedef struct governor_settings {
+    int is_interactive;
+    int boost_freq; //620000kHZ
+    int boost_time; //400msec
+    int go_maxspeed_load;
+    int go_maxspeed_load_off;
+    int timer_rate;
+    int timer_rate_off;
+    int io_is_busy;
+    int min_sample_time;
+    int core_bias; //0-3, 0=default and lowest threads, 3=running threads disabled.
+    int balance_level; //Cpu usage in %, 75
+    int down_delay; //500msec
+    int lm3533_bl_hvled; //0-2, 0=maks
+} power_profile;
+
+static power_profile profiles[PROFILE_MAX] = {
+    [PROFILE_POWER_SAVE] = {
+        .boost_freq = 0,
+        .boost_time = 0,
+        .go_maxspeed_load = 99,
+        .go_maxspeed_load_off = 110,
+        .timer_rate = 45000,
+        .timer_rate_off = 50000,
+        .io_is_busy = 0,
+        .min_sample_time = 60000,
+        .core_bias = 2,
+        .balance_level = 90,
+        .down_delay = 300,
+        .lm3533_bl_hvled = 1,
+    },
+    [PROFILE_BIAS_POWER_SAVE] = {
+        .boost_freq = 0,
+        .boost_time = 0,
+        .go_maxspeed_load = 98,
+        .go_maxspeed_load_off = 110,
+        .timer_rate = 45000,
+        .timer_rate_off = 50000,
+        .io_is_busy = 1,
+        .min_sample_time = 60000,
+        .core_bias = 2,
+        .balance_level = 85,
+        .down_delay = 400,
+        .lm3533_bl_hvled = 0,
+    },
+    [PROFILE_BALANCED] = {
+        .boost_freq = 620000,
+        .boost_time = 400,
+        .go_maxspeed_load = 96,
+        .go_maxspeed_load_off = 110,
+        .timer_rate = 40000,
+        .timer_rate_off = 50000,
+        .io_is_busy = 1,
+        .min_sample_time = 60000,
+        .core_bias = 1,
+        .balance_level = 80,
+        .down_delay = 500,
+        .lm3533_bl_hvled = 0,
+    },
+    [PROFILE_HIGH_PERFORMANCE] = {
+        .boost_freq = 760000,
+        .boost_time = 500,
+        .go_maxspeed_load = 94,
+        .go_maxspeed_load_off = 110,
+        .timer_rate = 30000,
+        .timer_rate_off = 50000,
+        .io_is_busy = 1,
+        .min_sample_time = 50000,
+        .core_bias = 0,
+        .balance_level = 75,
+        .down_delay = 500,
+        .lm3533_bl_hvled = 0,
+    },
+};
+ 
diff --git a/power/power_p880.c b/power/power_p880.c
new file mode 100644
index 0000000..41e1683
--- /dev/null
+++ b/power/power_p880.c
@@ -0,0 +1,250 @@
+/* 
+ * Copyright (C) 2015 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+// Based on device_asus_flo
+
+#define LOG_TAG "PowerHAL"
+
+#include <hardware/hardware.h>
+#include <hardware/power.h>
+
+#include <stdbool.h>
+#include <errno.h>
+#include <fcntl.h>
+#include <string.h>
+
+#include <sys/types.h>
+#include <sys/stat.h>
+#include <unistd.h>
+
+#include <utils/Log.h>
+
+#include "power.h"
+
+#define INTERACTIVE_PATH "/sys/devices/system/cpu/cpufreq/interactive/"
+#define BOOST_PATH "/sys/module/input_cfboost/parameters/"
+#define CPUQUIET_PATH "/sys/devices/system/cpu/cpuquiet/balanced/"
+#define BACKLIGHT_PATH "/sys/devices/platform/tegra-i2c.1/i2c-1/1-0036/"
+
+static pthread_mutex_t lock = PTHREAD_MUTEX_INITIALIZER;
+static int boostpulse_fd = -1;
+
+static int current_power_profile = -1;
+static int requested_power_profile = -1;
+
+static int sysfs_write_str(char *path, char *s)
+{
+    char buf[80];
+    int len;
+    int ret = 0;
+    int fd;
+
+    fd = open(path, O_WRONLY);
+    if (fd < 0) {
+        strerror_r(errno, buf, sizeof(buf));
+        ALOGE("Error opening %s: %s\n", path, buf);
+        return -1 ;
+    }
+
+    len = write(fd, s, strlen(s));
+    if (len < 0) {
+        strerror_r(errno, buf, sizeof(buf));
+        ALOGE("Error writing to %s: %s\n", path, buf);
+        ret = -1;
+    }
+
+    close(fd);
+
+    return ret;
+}
+
+static int sysfs_write_int(char *path, int value)
+{
+    char buf[80];
+    snprintf(buf, 80, "%d", value);
+    return sysfs_write_str(path, buf);
+}
+
+static bool check_governor(void)
+{
+    struct stat s;
+    int err = stat(INTERACTIVE_PATH, &s);
+    if (err != 0) return false;
+    if (S_ISDIR(s.st_mode)) return true;
+    return false;
+}
+
+static int is_profile_valid(int profile)
+{
+    return profile >= 0 && profile < PROFILE_MAX;
+}
+
+static void power_init(__attribute__((unused)) struct power_module *module)
+{
+    ALOGI("%s", __func__);
+}
+
+static int boostpulse_open()
+{
+    pthread_mutex_lock(&lock);
+    if (boostpulse_fd < 0) {
+        boostpulse_fd = open(BOOST_PATH "boost_freq", O_WRONLY);
+    }
+    pthread_mutex_unlock(&lock);
+
+    return boostpulse_fd;
+}
+
+static void power_set_interactive(__attribute__((unused)) struct power_module *module, int on)
+{
+    if (!is_profile_valid(current_power_profile)) {
+        ALOGD("%s: no power profile selected yet", __func__);
+        return;
+    }
+
+    // break out early if governor is not interactive
+    if (!check_governor()) return;
+
+    if (on) {
+        sysfs_write_int(INTERACTIVE_PATH "go_maxspeed_load",
+                        profiles[current_power_profile].go_maxspeed_load);
+        sysfs_write_int(INTERACTIVE_PATH "timer_rate",
+                        profiles[current_power_profile].timer_rate);
+    } else {
+        sysfs_write_int(INTERACTIVE_PATH "go_maxspeed_load",
+                        profiles[current_power_profile].go_maxspeed_load_off);
+        sysfs_write_int(INTERACTIVE_PATH "timer_rate",
+                        profiles[current_power_profile].timer_rate_off);
+    }
+}
+
+static void set_power_profile(int profile)
+{
+    if (!is_profile_valid(profile)) {
+        ALOGE("%s: unknown profile: %d", __func__, profile);
+        return;
+    }
+
+    // break out early if governor is not interactive
+    if (!check_governor()) return;
+
+    if (profile == current_power_profile)
+        return;
+
+    ALOGD("%s: setting profile %d", __func__, profile);
+
+    sysfs_write_int(BOOST_PATH "boost_freq",
+                    profiles[profile].boost_freq);
+    sysfs_write_int(BOOST_PATH "boost_time",
+                    profiles[profile].boost_time);
+    sysfs_write_int(INTERACTIVE_PATH "go_maxspeed_load",
+                    profiles[profile].go_maxspeed_load);
+    sysfs_write_int(INTERACTIVE_PATH "timer_rate",
+                    profiles[profile].timer_rate);
+    sysfs_write_int(INTERACTIVE_PATH "io_is_busy",
+                    profiles[profile].io_is_busy);
+    sysfs_write_int(INTERACTIVE_PATH "min_sample_time",
+                    profiles[profile].min_sample_time);
+    sysfs_write_int(CPUQUIET_PATH "core_bias",
+                    profiles[profile].core_bias);
+    sysfs_write_int(CPUQUIET_PATH "balance_level",
+                    profiles[profile].balance_level);
+    sysfs_write_int(CPUQUIET_PATH "down_delay",
+                    profiles[profile].down_delay);
+    sysfs_write_int(BACKLIGHT_PATH "lm3533_bl_hvled",
+                    profiles[profile].lm3533_bl_hvled);
+
+    current_power_profile = profile;
+}
+
+static void power_hint(__attribute__((unused)) struct power_module *module,
+                       power_hint_t hint, void *data)
+{
+    char buf[80];
+    int len;
+
+    switch (hint) {
+    case POWER_HINT_LAUNCH_BOOST:
+    case POWER_HINT_CPU_BOOST:
+        if (!is_profile_valid(current_power_profile)) {
+            ALOGD("%s: no power profile selected yet", __func__);
+            return;
+        }
+
+        if (!profiles[current_power_profile].boost_time)
+            return;
+
+        // break out early if governor is not interactive
+        if (!check_governor()) return;
+
+        if (boostpulse_open() >= 0) {
+            snprintf(buf, sizeof(buf), "%d", 
+                (profiles[current_power_profile].boost_freq));
+            len = write(boostpulse_fd, &buf, sizeof(buf));
+            if (len < 0) {
+                strerror_r(errno, buf, sizeof(buf));
+                ALOGE("Error writing to boostpulse: %s\n", buf);
+
+                pthread_mutex_lock(&lock);
+                close(boostpulse_fd);
+                boostpulse_fd = -1;
+                pthread_mutex_unlock(&lock);
+            }
+        }
+        break;
+    case POWER_HINT_SET_PROFILE:
+        pthread_mutex_lock(&lock);
+        set_power_profile(*(int32_t *)data);
+        pthread_mutex_unlock(&lock);
+        break;
+    case POWER_HINT_LOW_POWER:
+        /* This hint is handled by the framework */
+        break;
+    default:
+        break;
+    }
+}
+
+static struct hw_module_methods_t power_module_methods = {
+    .open = NULL,
+};
+
+static int get_feature(__attribute__((unused)) struct power_module *module,
+                       feature_t feature)
+{
+    if (feature == POWER_FEATURE_SUPPORTED_PROFILES) {
+        return PROFILE_MAX;
+    }
+    return -1;
+}
+
+struct power_module HAL_MODULE_INFO_SYM = {
+    .common = {
+        .tag = HARDWARE_MODULE_TAG,
+        .module_api_version = POWER_MODULE_API_VERSION_0_2,
+        .hal_api_version = HARDWARE_HAL_API_VERSION,
+        .id = POWER_HARDWARE_MODULE_ID,
+        .name = "msm8960 Power HAL",
+        .author = "Gabriele M",
+        .methods = &power_module_methods,
+    },
+
+    .init = power_init,
+    .setInteractive = power_set_interactive,
+    .powerHint = power_hint,
+    .getFeature = get_feature
+};
+ 
diff --git a/prebuilt/89input_boost b/prebuilt/89input_boost
deleted file mode 100755
index c8ebcc1..0000000
--- a/prebuilt/89input_boost
+++ /dev/null
@@ -1,12 +0,0 @@
-#!/system/bin/sh
-
-## Set this to 0 to disable input cpu boost
-ENABLE=1
-
-if [ $ENABLE = 1 ]; then
-    if [ -e /sys/module/input_cfboost/parameters/boost_freq ]; then 
-        echo 620000 > /sys/module/input_cfboost/parameters/boost_freq
-        echo 400 > /sys/module/input_cfboost/parameters/boost_time
-        #echo 2 > /sys/module/input_cfboost/parameters/boost_cpus
-    fi
-fi

